name: Prepare Full Offline Installer & CNI Assets for CentOS

on:
  workflow_dispatch:

jobs:
  prepare-assets:
    runs-on: ubuntu-22.04
    container:
      image: quay.io/centos/centos:stream10  # Cambiado a Stream8 para mejor compatibilidad
      options: --privileged --dns 8.8.8.8 --dns 1.1.1.1

    steps:
    - name: Configurar DNS y red dentro del contenedor
      run: |
        # Configurar DNS alternativos
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
        
        # Verificar conectividad
        ping -c 3 google.com || echo "Verificación de red fallida"
        
        # Configurar repositorios base con mirrors alternativos
        sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*.repo
        sed -i 's|#baseurl=http://mirror.centos.org|baseurl=https://mirrors.edge.kernel.org/centos|g' /etc/yum.repos.d/CentOS-*.repo        
        
    - name: Instalar herramientas necesarias
      run: |
        dnf update -y
        dnf install -y --allowerasing curl wget tar gzip bash git jq gnupg2 shadow-utils \
                       yum-utils device-mapper-persistent-data lvm2 util-linux rpm-build \
                       conntrack-tools ethtool iproute socat ebtables

        # Agregar repositorio oficial de Docker CE
        dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

        # Instalar Docker
        dnf install -y docker-ce docker-ce-cli containerd.io

        # Iniciar el servicio de Docker
        systemctl start docker || dockerd &
        sleep 10

    - name: Inicializar Docker daemon
      run: |
        dockerd-entrypoint.sh &
        sleep 10

    - name: Preparar carpetas
      run: |
        mkdir -p offline-assets/rpms/k8s
        mkdir -p offline-assets/rpms/os
        mkdir -p offline-assets/cni/calico
        mkdir -p offline-assets/cni/flannel
        mkdir -p offline-assets/cni/cilium
        mkdir -p docker-images

    - name: Configurar repositorios
      run: |
        # Configurar repositorio de Kubernetes
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key -o /tmp/kubernetes.key
        rpm --import /tmp/kubernetes.key

        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
        enabled=1
        gpgcheck=1
        repo_gpgcheck=0
        gpgkey=file:///tmp/kubernetes.key
        EOF

        # Habilitar EPEL y PowerTools
        dnf install -y epel-release
        dnf config-manager --set-enabled powertools

        # Actualizar cache
        dnf makecache

    - name: Descargar paquetes Kubernetes y dependencias
      run: |
        cd offline-assets/rpms/k8s
        
        # Descargar dependencias esenciales
        for pkg in conntrack-tools ethtool iproute socat ebtables; do
          yumdownloader --resolve --destdir=. --arch x86_64 $pkg || \
          echo "⚠️ No se pudo descargar dependencia $pkg"
        done

        # Descargar componentes de Kubernetes
        for pkg in kubelet kubeadm kubectl cri-tools kubernetes-cni; do
          echo "Descargando $pkg..."
          yumdownloader --resolve --destdir=. --arch x86_64 $pkg || \
          echo "⚠️ Falló la descarga de $pkg"
        done

        # Descargar containerd desde Docker
        yumdownloader --disablerepo=* --enablerepo=docker-ce-stable --resolve --destdir=. --arch x86_64 containerd.io || \
        echo "❌ No se pudo descargar containerd.io"

        # Verificar descargas
        ls -lh *.rpm || echo "No se encontraron archivos RPM"

    - name: Descargar paquetes del sistema
      run: |
        cd offline-assets/rpms/os
        
        # Lista de paquetes con nombres correctos
        for pkg in \
          wget curl net-tools iproute bind-utils \
          openssh openssh-clients openssh-server openssl \
          ca-certificates gnupg2 redhat-lsb tar \
          gzip unzip vim-enhanced nano sudo \
          dnf ansible-core python3 python3-pip; do
          
          yumdownloader --resolve --destdir=. --archlist=x86_64,noarch $pkg || \
          echo "⚠️ No se pudo descargar $pkg"
        done

        # Paquetes especiales desde EPEL
        yumdownloader --enablerepo=epel --resolve --destdir=. --arch x86_64 python3-dnf || true

    # [Secciones de CNI (Calico, Flannel, Cilium) permanecen igual...]

    - name: Crear paquete comprimido final
      run: |
        tar -czvf offline_assets_bundle.tar.gz offline-assets

    - name: Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: offline_assets_bundle
        path: offline_assets_bundle.tar.gz
