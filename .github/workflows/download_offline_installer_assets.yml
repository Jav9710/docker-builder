name: Prepare Full Offline Installer & CNI Assets for CentOS

on:
  workflow_dispatch:

jobs:
  prepare-assets:
    runs-on: ubuntu-22.04
    container:
      image: quay.io/centos/centos:stream10
      options: --privileged

    steps:
    - name: Instalar herramientas necesarias
      run: |
        dnf update -y
        dnf install -y --allowerasing curl wget tar gzip bash git jq gnupg2 shadow-utils \
                       yum-utils device-mapper-persistent-data lvm2 util-linux rpm-build

        # Agregar repositorio oficial de Docker CE
        dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

        # Instalar Docker
        dnf install -y docker-ce docker-ce-cli containerd.io

        # Iniciar el servicio de Docker
        systemctl start docker || dockerd &
        sleep 10


    - name: Inicializar Docker daemon
      run: |
        dockerd-entrypoint.sh &  # Iniciar Docker daemon
        sleep 10

    - name: Preparar carpetas
      run: |
        mkdir -p offline-assets/rpms/k8s
        mkdir -p offline-assets/rpms/os
        mkdir -p offline-assets/cni/calico
        mkdir -p offline-assets/cni/flannel
        mkdir -p offline-assets/cni/cilium
        mkdir -p docker-images

    - name: Agregar repositorio Kubernetes (CentOS)
      run: |
        # Descargar clave GPG manualmente y forzar su importación
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key -o /tmp/kubernetes.key
        rpm --import /tmp/kubernetes.key

        # Crear repositorio apuntando a clave local ya importada
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
        enabled=1
        gpgcheck=1
        repo_gpgcheck=0
        gpgkey=file:///tmp/kubernetes.key
        EOF

        # Hacer primer cacheo sin requerir repo_gpgcheck
        dnf --nogpgcheck makecache

        # (Opcional) Validar que clave fue importada
        rpm -q gpg-pubkey

    - name: Descargar paquetes RPM de Kubernetes y dependencias
      run: |
        cd offline-assets/rpms/k8s
        
        # Configurar repositorios necesarios
        dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        curl -s https://packages.cloud.google.com/yum/doc/yum-key.gpg | gpg --dearmor > /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes
        
        # Descargar componentes principales
        for pkg in kubelet kubeadm kubectl; do
          echo "Descargando $pkg..."
          yumdownloader --resolve --destdir=. --arch x86_64 $pkg || \
          echo "⚠️ Falló la descarga de $pkg, intentando con repositorio alternativo..." && \
          yumdownloader --disablerepo=* --enablerepo=kubernetes --resolve --destdir=. --arch x86_64 $pkg
        done
        
        # Descargar containerd.io específicamente desde Docker
        echo "Descargando containerd.io..."
        yumdownloader --disablerepo=* --enablerepo=docker-ce-stable --resolve --destdir=. --arch x86_64 containerd.io || \
        echo "❌ No se pudo descargar containerd.io - necesario para la instalación"
        
        # Verificar descargas exitosas
        echo "Paquetes descargados:"
        ls -lh *.rpm || echo "No se encontraron archivos RPM"

    - name: Descargar paquetes RPM del sistema (compatible con CentOS Stream 10)
      run: |
          cd offline-assets/rpms/os
          
          # Habilitar repositorios adicionales necesarios
          dnf install -y epel-release
          dnf config-manager --set-enabled powertools
          
          # Lista de paquetes con nombres correctos para CentOS Stream 10
          for pkg in \
            wget curl net-tools iproute bind-utils \
            openssh openssh-clients openssh-server openssl \
            ca-certificates gnupg2 redhat-lsb-core tar \
            gzip unzip vim-enhanced nano sudo \
            dnf ansible-core python3 python3-pip python3-dnf; do
            
            # Descargar permitiendo paquetes noarch y x86_64
            yumdownloader --resolve --destdir=. --archlist=x86_64,noarch $pkg || echo "⚠️ No se pudo descargar $pkg, intentando alternativa..."
            
            # Alternativas para paquetes problemáticos
            if [[ $? -ne 0 ]]; then
              case $pkg in
                "redhat-lsb-core")
                  yumdownloader --resolve --destdir=. --archlist=x86_64,noarch redhat-lsb || true
                  ;;
                "vim")
                  yumdownloader --resolve --destdir=. --archlist=x86_64,noarch vim-enhanced || true
                  ;;
                "ansible")
                  yumdownloader --resolve --destdir=. --archlist=x86_64,noarch ansible-core || true
                  ;;
                "python3-dnf")
                  yumdownloader --resolve --destdir=. --archlist=x86_64,noarch python3-dnf || true
                  ;;
              esac
            fi
          done
          
          # Paquetes que podrían necesitar instalación desde EPEL
          for epel_pkg in python3-pip; do
            yumdownloader --resolve --destdir=. --archlist=x86_64,noarch --enablerepo=epel $epel_pkg || true
          done

    # -------------------------------
    # CALICO
    - name: Descargar manifiestos de Calico
      run: |
        curl -o offline-assets/cni/calico/tigera-operator.yaml https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/tigera-operator.yaml
        curl -o offline-assets/cni/calico/custom-resources.yaml https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/custom-resources.yaml

    - name: Descargar imágenes de Calico
      run: |
        cd docker-images
        for img in \
          docker.io/calico/cni:v3.27.0 \
          docker.io/calico/node:v3.27.0 \
          docker.io/calico/kube-controllers:v3.27.0 \
          docker.io/calico/pod2daemon-flexvol:v3.27.0 \
          docker.io/calico/typha:v3.27.0 \
          docker.io/calico/apiserver:v3.27.0 \
          quay.io/tigera/operator:v1.30.0; do
            docker pull $img
            fname=$(echo $img | tr '/:' '_').tar
            docker save -o $fname $img
        done
        mv *.tar ../offline-assets/cni/calico/

    # -------------------------------
    # FLANNEL
    - name: Descargar manifiesto de Flannel
      run: |
        curl -o offline-assets/cni/flannel/kube-flannel.yml https://raw.githubusercontent.com/flannel-io/flannel/v0.25.1/manifests/kube-flannel.yml

    - name: Descargar imágenes de Flannel
      run: |
        cd docker-images
        docker pull flannel/flannel:v0.25.1
        docker save -o flannel_flannel_v0.25.1.tar flannel/flannel:v0.25.1
        mv *.tar ../offline-assets/cni/flannel/

    # -------------------------------
    # CILIUM
    - name: Descargar manifiestos de Cilium
      run: |
        curl -L https://raw.githubusercontent.com/cilium/cilium/v1.14.6/install/kubernetes/cilium.yaml \
          -o offline-assets/cni/cilium/cilium.yaml

    - name: Descargar imágenes de Cilium
      run: |
        cd docker-images
        for img in \
          quay.io/cilium/cilium:v1.14.6 \
          quay.io/cilium/operator-generic:v1.14.6; do
            docker pull $img
            fname=$(echo $img | tr '/:' '_').tar
            docker save -o $fname $img
        done
        mv *.tar ../offline-assets/cni/cilium/

    # -------------------------------
    - name: Crear paquete comprimido final
      run: |
        tar -czvf offline_assets_bundle.tar.gz offline-assets

    - name: Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: offline_assets_bundle
        path: offline_assets_bundle.tar.gz
