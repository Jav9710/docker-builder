name: Prepare Full Offline Installer & CNI Assets

on:
  workflow_dispatch:

jobs:
  prepare-assets:
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:22.04
      options: --privileged


    steps:
    - name: Instalar herramientas necesarias
      run: |
        apt-get update
        apt-get install -y curl wget tar gzip bash util-linux coreutils git jq dpkg-dev gnupg apt-utils docker.io
        systemctl start docker || sudo dockerd &
        sleep 10 

    - name: Inicializar Docker daemon
      run: |
        dockerd-entrypoint.sh &  # Start Docker daemon
        sleep 10

    - name: Preparar carpetas
      run: |
        mkdir -p offline-assets/debs/k8s
        mkdir -p offline-assets/debs/os
        mkdir -p offline-assets/cni/calico
        mkdir -p offline-assets/cni/flannel
        mkdir -p offline-assets/cni/cilium
        mkdir -p docker-images

    - name: Configurar repositorio de Kubernetes
      run: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
        apt-get update

    - name: Descargar paquetes .deb de Kubernetes
      run: |
        cd offline-assets/debs/k8s
        for pkg in kubelet kubeadm kubectl containerd; do
          apt-get download $pkg || echo "❗ No se encontró $pkg"
        done

    - name: Descargar paquetes .deb de utilidades del sistema
      run: |
        cd offline-assets/debs/os
        for pkg in wget curl net-tools iproute2 bind9-utils openssh-client openssh-server openssl \
                    ca-certificates gnupg lsb-release software-properties-common tar gzip unzip \
                    vim nano sudo apt-transport-https apt-utils ansible python3 python3-pip python3-apt; do
          apt-get download $pkg || echo "❗ No se encontró $pkg"
        done

    # -------------------------------
    # CALICO
    - name: Descargar manifiestos de Calico
      run: |
        curl -o offline-assets/cni/calico/tigera-operator.yaml https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/tigera-operator.yaml
        curl -o offline-assets/cni/calico/custom-resources.yaml https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/custom-resources.yaml

    - name: Descargar imágenes de Calico
      run: |
        cd docker-images
        for img in \
          docker.io/calico/cni:v3.27.0 \
          docker.io/calico/node:v3.27.0 \
          docker.io/calico/kube-controllers:v3.27.0 \
          docker.io/calico/pod2daemon-flexvol:v3.27.0 \
          docker.io/calico/typha:v3.27.0 \
          docker.io/calico/apiserver:v3.27.0 \
          quay.io/tigera/operator:v1.30.0; do
            docker pull $img
            fname=$(echo $img | tr '/:' '_').tar
            docker save -o $fname $img
        done
        mv *.tar ../offline-assets/cni/calico/

    # -------------------------------
    # FLANNEL
    - name: Descargar manifiesto de Flannel
      run: |
        curl -o offline-assets/cni/flannel/kube-flannel.yml https://raw.githubusercontent.com/flannel-io/flannel/v0.25.1/manifests/kube-flannel.yml

    - name: Descargar imágenes de Flannel
      run: |
        cd docker-images
        docker pull flannel/flannel:v0.25.1
        docker save -o flannel_flannel_v0.25.1.tar flannel/flannel:v0.25.1
        mv *.tar ../offline-assets/cni/flannel/

    # -------------------------------
    # CILIUM
    - name: Descargar manifiestos de Cilium
      run: |
        curl -L https://raw.githubusercontent.com/cilium/cilium/v1.14.6/install/kubernetes/cilium.yaml \
          -o offline-assets/cni/cilium/cilium.yaml


    - name: Descargar imágenes de Cilium
      run: |
        cd docker-images
        for img in \
          quay.io/cilium/cilium:v1.14.6 \
          quay.io/cilium/operator-generic:v1.14.6; do
            docker pull $img
            fname=$(echo $img | tr '/:' '_').tar
            docker save -o $fname $img
        done
        mv *.tar ../offline-assets/cni/cilium/

    # -------------------------------
    - name: Crear paquete comprimido final
      run: |
        tar -czvf offline_assets_bundle.tar.gz offline-assets

    - name: Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: offline_assets_bundle
        path: offline_assets_bundle.tar.gz
