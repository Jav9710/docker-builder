name: Prepare Full Offline Installer & CNI Assets for CentOS Stream 10 (x86_64)

on:
  workflow_dispatch:

jobs:
  prepare-assets:
    runs-on: ubuntu-22.04  # Runner x86_64
    container:
      image: quay.io/centos/centos:stream10
      options: --privileged --dns 8.8.8.8 --dns 1.1.1.1

    steps:
    - name: Configurar entorno x86_64
      run: |
        # Configurar DNS y repositorios específicos para x86_64
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
        
        # Configurar repositorios base para x86_64
        sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Stream*.repo
        sed -i 's|#baseurl=http://mirror.centos.org|baseurl=https://mirror.stream.centos.org/10-stream/x86_64|g' /etc/yum.repos.d/CentOS-Stream*.repo
        
        # Verificar arquitectura
        echo "Arquitectura del sistema: $(uname -m)"
        echo "Arquitectura del contenedor: $(arch)"

    - name: Instalar herramientas básicas para x86_64
      run: |
        dnf update -y --disablerepo=* --enablerepo=baseos,appstream,extras-common
        dnf install -y --allowerasing \
          curl wget tar gzip bash git jq gnupg2 shadow-utils \
          yum-utils device-mapper-persistent-data lvm2 util-linux rpm-build \
          conntrack-tools ethtool iproute socat ebtables libseccomp \
          --arch x86_64,noarch

    - name: Configurar Docker para x86_64
      run: |
        # Repositorio Docker para x86_64
        curl -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo
        sed -i 's/\$basearch/x86_64/g' /etc/yum.repos.d/docker-ce.repo
        
        dnf install -y docker-ce docker-ce-cli containerd.io --arch x86_64
        systemctl start docker || dockerd &
        sleep 15

    - name: Preparar estructura de directorios
      run: |
        mkdir -p offline-assets/{rpms/{k8s,os},cni/{calico,flannel,cilium}}
        mkdir -p docker-images

    - name: Configurar repositorios adicionales x86_64
      run: |
        # EPEL para x86_64
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
        dnf config-manager --set-enabled crb

        # Repositorio Kubernetes para x86_64
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/x86_64/
        enabled=1
        gpgcheck=1
        repo_gpgcheck=0
        gpgkey=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
        EOF
        
        rpm --import https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
        dnf makecache

    - name: Descargar paquetes Kubernetes x86_64
      run: |
        cd offline-assets/rpms/k8s
        
        # Dependencias específicas para x86_64
        declare -a DEPS=(
          "conntrack-tools-1.4.4*"
          "ethtool-5*"
          "iproute-5*"
          "socat-1.7*"
          "ebtables-2.0*"
          "libseccomp-2.5*"
        )
        
        for pkg in "${DEPS[@]}"; do
          yumdownloader --destdir=. --arch x86_64 "$pkg" || \
          echo "⚠️ No se pudo descargar dependencia $pkg"
        done

        # Componentes Kubernetes para x86_64
        declare -a K8S_PKGS=(
          "kubelet-1.33*"
          "kubeadm-1.33*"
          "kubectl-1.33*"
          "cri-tools-1.26*"
          "kubernetes-cni-1.2*"
        )
        
        for pkg in "${K8S_PKGS[@]}"; do
          yumdownloader --destdir=. --arch x86_64 "$pkg" || \
          echo "⚠️ Falló la descarga de $pkg"
        done

        # Containerd para x86_64
        yumdownloader --disablerepo=* --enablerepo=docker-ce-stable \
          --destdir=. --arch x86_64 "containerd.io-1.6*" || \
          echo "❌ No se pudo descargar containerd.io"

        ls -lh *.rpm || echo "No se encontraron archivos RPM"

    - name: Descargar paquetes del sistema x86_64
      run: |
        cd offline-assets/rpms/os
        
        declare -a SYS_PKGS=(
          "wget-1.21*"
          "curl-7.76*"
          "net-tools-2.0*"
          "iproute-5.10*"
          "bind-utils-9.16*"
          "openssh-8.0*"
          "openssl-3.0*"
          "gnupg2-2.2*"
          "redhat-lsb-core-4.1*"
          "vim-enhanced-8.2*"
          "ansible-core-2.12*"
          "python3-3.9*"
          "python3-pip-20.3*"
        )
        
        for pkg in "${SYS_PKGS[@]}"; do
          yumdownloader --destdir=. --arch x86_64 "$pkg" || \
          echo "⚠️ No se pudo descargar $pkg"
        done

    # [Secciones CNI permanecen igual pero asegurando imágenes x86_64]

    - name: Verificar arquitectura de paquetes
      run: |
        echo "=== Verificación de arquitectura ==="
        find offline-assets/rpms/ -name "*.rpm" -exec rpm -qip {} \; | grep -E "Architecture|Name|Version"
        echo "=================================="

    - name: Crear paquete comprimido final
      run: |
        tar -czvf offline_assets_bundle_x86_64.tar.gz offline-assets

    - name: Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: offline_assets_bundle_x86_64
        path: offline_assets_bundle_x86_64.tar.gz
