name: Prepare Full Offline Installer & CNI Assets for CentOS Stream 10 (x86_64)

on:
  workflow_dispatch:

jobs:
  prepare-assets:
    runs-on: ubuntu-22.04
    container:
      image: quay.io/centos/centos:stream10
      options: --privileged --dns 8.8.8.8 --dns 1.1.1.1

    steps:
    - name: Configurar entorno básico
      run: |
        # Configurar DNS
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
        
        # Crear repositorios base manualmente
        cat <<EOF > /etc/yum.repos.d/CentOS-Stream.repo
        [baseos]
        name=CentOS Stream 10 - BaseOS
        baseurl=https://mirror.stream.centos.org/10-stream/BaseOS/x86_64/os/
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial

        [appstream]
        name=CentOS Stream 10 - AppStream
        baseurl=https://mirror.stream.centos.org/10-stream/AppStream/x86_64/os/
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial

        [extras]
        name=CentOS Stream 10 - Extras
        baseurl=https://mirror.stream.centos.org/10-stream/extras/x86_64/os/
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial
        EOF

        # Importar clave GPG
        curl -s https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official > /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial

        # Verificar conectividad
        curl -I https://mirror.stream.centos.org || echo "Verificación de red fallida"

    - name: Instalar herramientas básicas
      run: |
        dnf update -y
        dnf install -y \
          curl wget tar gzip bash git jq gnupg2 shadow-utils \
          yum-utils device-mapper-persistent-data lvm2 util-linux rpm-build \
          conntrack-tools ethtool iproute socat ebtables libseccomp

    - name: Configurar Docker
      run: |
        # Repositorio Docker para x86_64
        curl -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo
        sed -i 's/\$basearch/x86_64/g' /etc/yum.repos.d/docker-ce.repo
        
        dnf install -y docker-ce docker-ce-cli containerd.io
        systemctl start docker || dockerd &
        sleep 15

    - name: Preparar estructura de directorios
      run: |
        mkdir -p offline-assets/{rpms/{k8s,os},cni/{calico,flannel,cilium}}
        mkdir -p docker-images

    - name: Configurar repositorios adicionales
      run: |
        # EPEL para Stream 10
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
        dnf config-manager --set-enabled crb

        # Repositorio Kubernetes
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
        enabled=1
        gpgcheck=1
        repo_gpgcheck=0
        gpgkey=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
        EOF
        
        rpm --import https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
        dnf makecache

    - name: Descargar paquetes Kubernetes
      run: |
        cd offline-assets/rpms/k8s
        
        # Descargar componentes principales
        for pkg in kubelet kubeadm kubectl cri-tools kubernetes-cni; do
          echo "Descargando $pkg..."
          # Forma correcta de especificar arquitectura
          yumdownloader --destdir=. $pkg.x86_64 || \
          yumdownloader --destdir=. $pkg || \
          echo "⚠️ Falló la descarga de $pkg"
        done

        # Descargar containerd desde Docker
        yumdownloader --disablerepo=* --enablerepo=docker-ce-stable \
          --destdir=. containerd.io || \
          echo "❌ No se pudo descargar containerd.io"

        ls -lh *.rpm || echo "No se encontraron archivos RPM"

    - name: Descargar paquetes del sistema
      run: |
        cd offline-assets/rpms/os
        
        # Función para descargar paquetes con manejo de arquitectura
        download_pkg() {
          local pkg=$1
          echo "Intentando descargar $pkg para x86_64..."
          if yumdownloader --resolve --destdir=. $pkg.x86_64; then
            return 0
          fi
          
          echo "Intentando descargar $pkg como noarch..."
          if yumdownloader --resolve --destdir=. $pkg.noarch; then
            return 0
          fi
          
          echo "Intentando descargar $pkg sin especificar arquitectura..."
          if yumdownloader --resolve --destdir=. $pkg; then
            return 0
          fi
          
          echo "⚠️ No se pudo descargar $pkg (ni como x86_64 ni noarch)"
          return 1
        }
        
        # Lista de paquetes del sistema
        for pkg in wget curl net-tools iproute bind-utils \
                   openssh openssh-clients openssh-server openssl \
                   ca-certificates gnupg2 redhat-lsb-core tar \
                   gzip unzip vim-enhanced nano sudo \
                   dnf ansible-core python3 python3-pip; do
          download_pkg $pkg || true
        done

        # Paquetes especiales
        yumdownloader --resolve --destdir=. --enablerepo=epel python3-dnf || true

    # [Secciones CNI permanecen igual pero asegurando imágenes x86_64]

    - name: Verificar paquetes descargados
      run: |
        echo "=== Verificación de arquitectura ==="
        find offline-assets/rpms/ -name "*.rpm" -exec rpm -qip {} \; | grep -E "Name|Version|Architecture"
        echo "=================================="

    - name: Crear paquete comprimido final
      run: |
        tar -czvf offline_assets_bundle_x86_64.tar.gz offline-assets

    - name: Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: offline_assets_bundle_x86_64
        path: offline_assets_bundle_x86_64.tar.gz
