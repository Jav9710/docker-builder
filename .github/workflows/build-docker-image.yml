name: Build Docker Image from exo

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Etiqueta para la imagen Docker (e.g. exo:latest)'
        required: true
        default: 'exo:latest'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar espacio libre en disco
        run: |
          echo "Espacio disponible en disco antes de construir la imagen:"
          df -h

      - name: Crear Dockerfile dinámico
        run: |
          echo '
            FROM python:3.11-alpine3.21
           
            # Instalar dependencias del sistema
            RUN apk add --no-cache \
                git \
                wget \
                bash \
                libstdc++ \
                make \
                gcc \
                g++ \
                linux-headers \
                musl-dev
                
            # Instalar exo
            WORKDIR /app
            RUN git clone https://github.com/exo-explore/exo.git /app && \
                pip install -e . && \
                source install.sh && \
                pip install opencv-python-headless protobuf==5.27.2 tensorflow==2.19.0
            
            # Limpiar caché para reducir tamaño de imagen
            RUN conda clean -afy && \
                pip cache purge
            
            ENTRYPOINT [ "sh", "-c", "bash" ]
          ' > Dockerfile

      - name: Construir imagen Docker
        run: |
          docker build -t ${{ github.event.inputs.image_tag }} .

      - name: Eliminar imagen base de PyTorch para liberar espacio
        run: |
          docker rmi python:3.11-alpine3.21 || true

      - name: Mostrar tamaño de la imagen Docker
        run: |
          IMAGE_ID=$(docker images --format="{{.Repository}}:{{.Tag}} {{.ID}}" | grep "${{ github.event.inputs.image_tag }}" | awk '{print $2}')
          IMAGE_SIZE=$(docker image inspect $IMAGE_ID --format='{{.Size}}')
          IMAGE_SIZE_MB=$(echo "scale=2; $IMAGE_SIZE / 1024 / 1024" | bc)
          echo "Tamaño de la imagen: ${IMAGE_SIZE_MB} MB"

      - name: Instalar zstd para compresión agresiva
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd

      - name: Comprimir imagen Docker usando zstd
        run: |
          docker save ${{ github.event.inputs.image_tag }} | zstd -19 -T0 -o exo_image.tar.zst
          ls -lh exo_image.tar.zst

      - name: Subir artifact (imagen Docker comprimida)
        uses: actions/upload-artifact@v4
        with:
          name: exo-docker-image
          path: exo_image.tar.zst
